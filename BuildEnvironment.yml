# Basic provisioning example
- name: Create Mesosphere AWS resources
  hosts: localhost
  connection: local
  gather_facts: True

# Variables needed to create the cluster
vars:
  varVPCName: Mesos_Test_VPC
  aws_region: us-east


include_task: create_vpc.yml
include_task: create_mesos_master.yml

# Create the security group for the mesos cluster
  tasks:
  - name: Create a security group
    ec2_group:
      name: Mesos_group
      description: "Mesosphere Security Group"
      region: "{{aws_region}}"
      vpc_id: "{{vpc_id}}"
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      rules:
        - proto: all
          cidr_ip: {{cidr_ip}} #who has access in?
        - proto: all
          group_name: Mesos_group
      rules_egress:
        - proto: all
          cidr_ip: 0.0.0.0/0 #outbound access
    register: firewall


#Create instances to go in the cluster, in the security group above
  - name: Create the mesos master EC2 instances
    ec2:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      key_name: "{{key_name}}"
      region: "{{aws_region}}"
      group_id: "{{firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: "{{ami_id}}"
      wait: yes
      count: 3
      instance_tags:
        servertype: mesos_master
        OSType: CentOS7
      register: ec2
   - name: Add all instance public IPs to host group
     add_host: hostname={{ item.public_ip }} groups=mesos_masters
     with_items: "{{ ec2.instances }}"

  # Configure an ELB for the  with health check and the access logs
    - local_action:
        module: ec2_elb_lb
        name: "Mesos_master_ext_elb"
        state: present
        zones:
          - us-east-1e
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
# when we get to health checks I'll enable it
#        health_check:
#            ping_protocol: http # options are http, https, ssl, tcp
#            ping_port: 80
#            ping_path: "/index.html" # not required for tcp or ssl
#            response_timeout: 5 # seconds
#            interval: 30 # seconds
#            unhealthy_threshold: 2
#            healthy_threshold: 10
#        access_logs:
#            interval: 5 # minutes (defaults to 60)
#            s3_location: "my-bucket" # This value is required if access_logs is set
#            s3_prefix: "logs"
  - name: Create an EC2 instance
    ec2:
      aws_access_key: "{{aws_access_key}}"
      aws_secret_key: "{{aws_secret_key}}"
      key_name: "{{key_name}}"
      region: "{{aws_region}}"
      group_id: "{{firewall.group_id}}"
      instance_type: "{{instance_type}}"
      image: "{{ami_id}}"
      wait: yes
      volumes:
        - device_name: /dev/sda1
          volume_type: gp2
          volume_size: 100
          delete_on_termination: true
      exact_count: 6
      count_tag:
         Name: ansible-Mesos
      instance_tags:
         Name: ansible-mesos, centos
    register: ec2

# Basic configuration

- ec2_asg:
    name: special
    load_balancers: [ 'lb1', 'lb2' ]
    availability_zones: [ 'eu-west-1a', 'eu-west-1b' ]
    launch_config_name: 'lc-1'
    min_size: 1
    max_size: 10
    desired_capacity: 5
    vpc_zone_identifier: [ 'subnet-abcd1234', 'subnet-1a2b3c4d' ]
    tags:
      - environment: production
        propagate_at_launch: no

# Rolling ASG Updates

# Below is an example of how to assign a new launch config to an ASG and terminate old instances.
#
# All instances in "myasg" that do not have the launch configuration named "my_new_lc" will be terminated in
# a rolling fashion with instances using the current launch configuration, "my_new_lc".
#
# This could also be considered a rolling deploy of a pre-baked AMI.
#
# If this is a newly created group, the instances will not be replaced since all instances
# will have the current launch configuration.

- name: create launch config
  ec2_lc:
    name: my_new_lc
    image_id: ami-lkajsf
    key_name: mykey
    region: us-east-1
    security_groups: sg-23423
    instance_type: m1.small
    assign_public_ip: yes

- ec2_asg:
    name: myasg
    launch_config_name: my_new_lc
    health_check_period: 60
    health_check_type: ELB
    replace_all_instances: yes
    min_size: 5
    max_size: 5
    desired_capacity: 5
    region: us-east-1

# To only replace a couple of instances instead of all of them, supply a list
# to "replace_instances":

- ec2_asg:
    name: myasg
    launch_config_name: my_new_lc
    health_check_period: 60
    health_check_type: ELB
    replace_instances:
    - i-b345231
    - i-24c2931
    min_size: 5
    max_size: 5
    desired_capacity: 5
    region: us-east-1
